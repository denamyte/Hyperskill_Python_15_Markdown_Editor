type: edu
files:
- name: editor.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: tests.py
  visible: false
  text: |-
    from test.tests import Test

    if __name__ == '__main__':
        Test().run_tests()
  learner_created: false
- name: test/tests.py
  visible: false
  text: |-
    from hstest import StageTest, TestedProgram, CheckResult, dynamic_test


    class Test(StageTest):

        answers = [
            '#### Hello World!\n',
            'plain text**bold text**',
            '*italic text*`code.work()`',
            '[google](https://www.google.com)\n',
            '1. first\n2. second\n3. third\n4. fourth\n'
        ]

        def check_result_in_file(self, attach):
            try:
                with open('output.md', 'r') as outfile:
                    output = outfile.read()
                    if output != self.answers[attach]:
                        return CheckResult.wrong('The result written to the output file is wrong.')
            except IOError:
                return CheckResult.wrong('The output file is not found.')
            return CheckResult.correct()


        @dynamic_test
        def test1(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('header').strip().lower()
            if 'level' not in output:
                return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Level: > "')

            output = pr.execute('4').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Header formatter should prompt a user for both level and text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('Hello World!').split('\n')))
            if len(output) != 3:
                return CheckResult.wrong('Please remember that header formatter switches to a new line automatically')

            if output[0].strip().split() != ['####', 'hello', 'world!']:
                return CheckResult.wrong('Level 4 for header denotes as #### in markdown')

            if output[1]:
                return CheckResult.wrong('Please check whether some redundant data is printed after a header')

            if 'formatter' not in output[2].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=0)

        @dynamic_test
        def test2(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('plain').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Plain formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('plain text').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Plain formatter should only return the given text as is, and prompt a user for a new formatter")

            if output[0] != 'plain text':
                return CheckResult.wrong('Plain formatter returns the given text as is, without any extra symbols or tags')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = pr.execute('bold').strip().lower()
            if 'text' not in output:
                return CheckResult.wrong('Bold formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('bold text').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Bold formatter should only return the given text enclosed with '**' symbols, and prompt a user for a new formatter")

            if output[0] != 'plain text**bold text**':
                return CheckResult.wrong('Plain formatter returns the given text as is, and does not switch to a new line')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=1)

        @dynamic_test
        def test3(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('italic').strip().lower()
            if 'text' not in output.strip().lower():
                return CheckResult.wrong('Italic formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('italic text').split('\n')))
            if len(output) != 2 or output[0] != '*italic text*':
                return CheckResult.wrong("Bold formatter should only return the given text enclosed with '*' symbols, and prompt a user for a new formatter")

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = pr.execute('inline-code').strip().lower()
            if 'text' not in output:
                return CheckResult.wrong('Inline code formatter should prompt a user for text, i.e "- Text: > "')

            output = list(map(lambda item: item.lower(), pr.execute('code.work()').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong("Inline code formatter should only return the given text enclosed with '`' (backtick) symbols, and prompt a user for a new formatter")

            if output[0] != '*italic text*`code.work()`':
                return CheckResult.wrong('Inline code formatter does not switch to a new line')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=2)

        @dynamic_test
        def test4(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('link').strip().lower()
            if 'label' not in output:
                return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- Label: > "')

            output = pr.execute('google').strip().lower()
            if 'url' not in output:
                return CheckResult.wrong('Link formatter should prompt a user for both label and URL, i.e "- URL: > "')

            output = list(map(lambda item: item.lower(), pr.execute('https://www.google.com').split('\n')))
            if len(output) != 2:
                return CheckResult.wrong('Link code formatter should only return the given label associated with a URL in the form [Label](URL), and prompt a user for a new formatter')

            if output[0] != '[google](https://www.google.com)':
                return CheckResult.wrong('Please recall that for the given label and URL the correct link formatter return will be [Label](URL)')

            if 'formatter' not in output[1].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            output = list(map(lambda item: item.lower(), pr.execute('new-line').split('\n')))
            if len(output) != 3 or output[1] != '':
                return CheckResult.wrong('New-line formatter only moves the input pointer to the next line, and prompts a user for a new formatter')

            if output[0] != '[google](https://www.google.com)':
                return CheckResult.wrong('Please make sure that the markdown state is saved')

            if 'formatter' not in output[2].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=3)

        @dynamic_test
        def test5(self):
            pr = TestedProgram()
            pr.start()

            output = pr.execute('ordered-list').strip().lower()
            if 'number' not in output:
                return CheckResult.wrong('Ordered list formatter should prompt a user for the number of rows, i.e "- Number of rows: > "')

            output = list(map(lambda item: item.lower(), pr.execute('0').split('\n')))
            if len(output) < 2 or 'number' not in output[-1].strip():
                return CheckResult.wrong('(Un)ordered list formatter should inform a user that the number of rows should be greater than zero if the input was invalid, and prompt the user for this input again, i.e "- Number of rows: > "')

            pr.execute('4')
            pr.execute('first')
            pr.execute('second')
            pr.execute('third')
            output = list(map(lambda item: item.lower(), pr.execute('fourth').split('\n')))
            if len(output) != 6:
                return CheckResult.wrong('Ordered list formatter should switch to a new line automatically')

            if output[0] != '1. first' or output[1] != '2. second' or output[2] != '3. third' or output[3] != '4. fourth':
                return CheckResult.wrong('Ordered list formatter should enumerate its rows in the following manner: "1. ", "2.", and so on, depending on the given number of rows.')

            if 'formatter' not in output[5].strip():
                return CheckResult.wrong('A user should be prompted for input again, i.e  "- Choose a formatter: > "')

            pr.execute('!done')
            if not pr.is_finished():
                return CheckResult.wrong('Your program should finish its execution whenever !done is an input')

            return self.check_result_in_file(attach=4)


    if __name__ == '__main__':
        Test().run_tests()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: editor_menus.py
  visible: true
  text: |
    import md


    class EditorMenus:
        FORMATTERS = ['plain', 'bold', 'italic',
                      'header', 'link', 'inline-code',
                      'ordered-list', 'unordered-list',
                      'new-line']
        SPECIAL_COMMANDS = ['!help', '!done']

        def __init__(self):
            self._command: str = ''
            self._document = md.Document()
            self._header_level = 0
            self._text = ''
            self._rows_number = 0
            self._ordered_list = False

        def print_document(self) -> int:
            print(self._document)
            return 0

        def choose_formatter(self) -> int:
            cmd = input('Choose a formatter: ')
            if cmd not in (self.FORMATTERS + self.SPECIAL_COMMANDS):
                return 0
            self._command = cmd
            return 1

        @staticmethod
        def unknown_formatting_type() -> int:
            print('Unknown formatting type or command')
            return 0

        def execute_command(self) -> int:
            match self._command:
                case '!done':
                    return 0
                case '!help':
                    return 1
                case 'header':
                    return 2
                case 'bold':
                    return 3
                case 'italic':
                    return 4
                case 'plain':
                    return 5
                case 'inline-code':
                    return 6
                case 'new-line':
                    return 7
                case 'link':
                    return 8
                case 'ordered-list' | 'unordered-list' as lst:
                    self._ordered_list = lst == 'ordered-list'
                    return 9
            return 0

        @staticmethod
        def print_help() -> int:
            print('''\
    Available formatters: plain bold italic header link inline-code ordered-list unordered-list new-line
    Special commands: !help !done''')
            return 0

        def input_header_level(self) -> int:
            raw = input('Level: ')
            try:
                level = int(raw)
                if level < 1 or level > 6:
                    return 0
            except ValueError:
                return 0
            self._header_level = level
            return 1

        @staticmethod
        def input_header_level_error() -> int:
            print('The level should be within the range of 1 to 6')
            return 0

        def input_header_text(self) -> int:
            text = input('Text: ')
            self._document.append(md.Header(text, self._header_level))
            return self.print_document()

        def input_bold(self) -> int:
            text = input('Text: ')
            self._document.append(md.Bold(text))
            return self.print_document()

        def input_italic(self) -> int:
            text = input('Text: ')
            self._document.append(md.Italic(text))
            return self.print_document()

        def input_plain(self) -> int:
            text = input('Text: ')
            self._document.append(md.Plain(text))
            return self.print_document()

        def input_inline_code(self) -> int:
            text = input('Text: ')
            self._document.append(md.InlineCode(text))
            return self.print_document()

        def input_new_line(self) -> int:
            self._document.append(md.NewLine())
            return self.print_document()

        def input_link(self) -> int:
            self._document.append(md.Link(input('Label: '), input('URL: ')))
            return self.print_document()

        def input_list_number_of_rows(self) -> int:
            try:
                self._rows_number = int(input('Number of rows: '))
                return 0 if self._rows_number <= 0 else 1
            except ValueError:
                return 0

        @staticmethod
        def input_list_number_of_rows_error() -> int:
            print('The number of rows should be greater than zero')
            return 0

        def input_list_rows(self) -> int:
            rows = [input(f'Row #{i + 1}: ') for i in range(self._rows_number)]
            self._document.append(md.MDList(self._ordered_list, rows))
            return self.print_document()
  learner_created: true
- name: md.py
  visible: true
  text: |
    from abc import ABC, abstractmethod
    from typing import List


    class MDBase(ABC):
        @abstractmethod
        def render(self) -> str:
            ...


    class Plain(MDBase):
        def __init__(self, text: str):
            self._text = text

        def render(self) -> str:
            return self._text


    class InlineModifier(Plain):
        F_STR = '{0}{1}{0}'

        def __init__(self, text: str, modifier: str):
            super().__init__(text)
            self._modifier = modifier

        def render(self) -> str:
            return self.F_STR.format(self._modifier, self._text)


    class Bold(InlineModifier):
        def __init__(self, text: str):
            super().__init__(text, '**')


    class Italic(InlineModifier):
        def __init__(self, text: str):
            super().__init__(text, '*')


    class InlineCode(InlineModifier):
        def __init__(self, text: str):
            super().__init__(text, '`')


    class Header(Plain):
        F_STR = '{} {}\n'

        def __init__(self, text: str, level: int):
            super().__init__(self.F_STR.format('#' * level, text))
            self._level = level


    class NewLine(Plain):
        def __init__(self):
            super().__init__('\n')


    class Link(MDBase):
        F_STR = '[{label}]({url})'

        def __init__(self, label: str, url: str):
            self._label = label
            self._url = url

        def render(self) -> str:
            return self.F_STR.format(label=self._label, url=self._url)


    class MDList(MDBase):
        def __init__(self, ordered: bool, rows: List[str]):
            self._ordered = ordered
            self._rows = rows[:]

        def render(self) -> str:
            rows_gen = (f'{i + 1}. {self._rows[i]}' for i in range(len(self._rows)))\
                if self._ordered\
                else (f'* {self._rows[i]}' for i in range(len(self._rows)))
            return '\n'.join(rows_gen) + '\n'


    class Document(MDBase):
        def __init__(self):
            self._parts: List[MDBase] = []

        def append(self, md: MDBase):
            match md:
                case Header():
                    if len(self._parts):
                        self._parts.append(NewLine())
                    self._parts.append(md)
                case _:
                    self._parts.append(md)

        def render(self) -> str:
            return ''.join(p.render() for p in self._parts)

        def __str__(self):
            return self.render()
  learner_created: true
- name: output.md
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/12317#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 09 Nov 2022 18:11:31 UTC
record: -1
